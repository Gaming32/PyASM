from typing import Callable, Literal, Union

Label = Callable[[], None]
Address = int
Referenceable = Union[Label, Address]
Macro = Callable[..., None]

regx = 'regx'
regy = 'regy'
accum = 'accum'
proc = 'proc'

Register = Literal[regx, regy, accum, proc]

def inline_macro(macro: Macro) -> Macro: ...


def jump(label: Referenceable): ...
def call(label: Referenceable): ...
def halt(): ...
def add_memory(addr: Referenceable): ...
def add_value(addr: Referenceable): ...
def increment_memory(addr: Referenceable): ...

def push(reg: Register): ...
def pull(reg: Register): ...
def increment_register(reg: Register, addr: Referenceable): ...
def store_register(reg: Register, addr: Referenceable)

def load_immediate(reg: Register, val: int): ...
def load_address(reg: Register, addr: Address): ...

def reserve_label(label: str): ...

def branch_plus(label: Referenceable): ...
def branch_minus(label: Referenceable): ...
def branch_ne(label: Referenceable): ...
def branch_eq(label: Referenceable): ...

def compare(reg: Register, addr: Address): ...
